// <auto-generated />
using System;
using ClassifiedAds.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClassifiedAds.Migrator.MinsDream.Migrations.StockDb
{
    [DbContext(typeof(StockDbContext))]
    [Migration("20220616085258_20220616.25")]
    partial class _2022061625
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.Stock", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("CFICode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<decimal?>("ClosePrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Ex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("FetchDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("FivePrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("ISINCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Industry")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("ListingDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("SixtyPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("TenPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("TwentyPrice")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Code")
                        .HasName("PK_stock_1");

                    b.ToTable("Stock", (string)null);
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockDay", b =>
                {
                    b.Property<string>("StockCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<decimal?>("ClosePrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<long?>("DealAmount")
                        .HasColumnType("bigint");

                    b.Property<int?>("DealCount")
                        .HasColumnType("int");

                    b.Property<long?>("DealMoney")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("HighestPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("LowestPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("OpenPrice")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("StockCode", "Date");

                    b.HasIndex("Date");

                    b.ToTable("StockDay", (string)null);
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockEPS", b =>
                {
                    b.Property<string>("StockCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("EPS")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("StockCode", "Year");

                    b.ToTable("StockEPS", (string)null);
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockFundamental", b =>
                {
                    b.Property<string>("StockCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("DividendYear")
                        .HasColumnType("int");

                    b.Property<decimal?>("PERatio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceNetRatio")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ReportYearQuarter")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("StockName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("YieldRate")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("StockCode", "Date");

                    b.HasIndex("Date");

                    b.ToTable("StockFundamental", (string)null);
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockFunder", b =>
                {
                    b.Property<string>("StockCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("CreditBuy")
                        .HasColumnType("int");

                    b.Property<int>("CreditSell")
                        .HasColumnType("int");

                    b.Property<int>("CreditSum")
                        .HasColumnType("int");

                    b.Property<int>("ForeignBuy")
                        .HasColumnType("int");

                    b.Property<int>("ForeignSelfBuy")
                        .HasColumnType("int");

                    b.Property<int>("ForeignSelfSell")
                        .HasColumnType("int");

                    b.Property<int>("ForeignSelfSum")
                        .HasColumnType("int");

                    b.Property<int>("ForeignSell")
                        .HasColumnType("int");

                    b.Property<int>("ForeignSum")
                        .HasColumnType("int");

                    b.Property<int>("SelfBuy")
                        .HasColumnType("int");

                    b.Property<int>("SelfBuySell")
                        .HasColumnType("int");

                    b.Property<int>("SelfHedgingBuy")
                        .HasColumnType("int");

                    b.Property<int>("SelfHedgingSell")
                        .HasColumnType("int");

                    b.Property<int>("SelfHedgingSum")
                        .HasColumnType("int");

                    b.Property<int>("SelfSell")
                        .HasColumnType("int");

                    b.Property<int>("SelfSum")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("StockCode", "Date");

                    b.HasIndex("CreditSum");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("CreditSum"), new[] { "ForeignBuy", "ForeignSell", "ForeignSum", "ForeignSelfBuy", "ForeignSelfSell", "ForeignSelfSum", "CreditBuy", "CreditSell", "SelfBuySell", "SelfBuy", "SelfSell", "SelfSum", "SelfHedgingBuy", "SelfHedgingSell", "SelfHedgingSum", "Total" });

                    b.HasIndex("Date");

                    b.ToTable("StockFunder", (string)null);
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("Creater")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StockGroup", (string)null);
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockGroupItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("StockCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("StockCode");

                    b.ToTable("StockGroupItem", (string)null);
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockInsiderTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreditAfter")
                        .HasColumnType("int");

                    b.Property<int>("CreditBefore")
                        .HasColumnType("int");

                    b.Property<string>("During")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FromName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Method")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("OwnAfter")
                        .HasColumnType("int");

                    b.Property<int>("OwnBefore")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("StockCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("ToName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("StockCode");

                    b.HasIndex("Time");

                    b.ToTable("StockInsiderTransaction", (string)null);
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockMargin", b =>
                {
                    b.Property<string>("StockCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("FinancingBack")
                        .HasColumnType("int");

                    b.Property<int>("FinancingBalance")
                        .HasColumnType("int");

                    b.Property<int>("FinancingBeforeBalance")
                        .HasColumnType("int");

                    b.Property<int>("FinancingBuy")
                        .HasColumnType("int");

                    b.Property<int>("FinancingLimit")
                        .HasColumnType("int");

                    b.Property<int>("FinancingSell")
                        .HasColumnType("int");

                    b.Property<int>("Offset")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("SecuritiesBack")
                        .HasColumnType("int");

                    b.Property<int>("SecuritiesBalance")
                        .HasColumnType("int");

                    b.Property<int>("SecuritiesBeforeBalance")
                        .HasColumnType("int");

                    b.Property<int>("SecuritiesBuy")
                        .HasColumnType("int");

                    b.Property<int>("SecuritiesLimit")
                        .HasColumnType("int");

                    b.Property<int>("SecuritiesSell")
                        .HasColumnType("int");

                    b.HasKey("StockCode", "Date");

                    b.HasIndex("Date");

                    b.ToTable("StockMargin", (string)null);
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockNew", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Content")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Provider")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("StockCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("StockCode");

                    b.HasIndex("Time");

                    b.ToTable("StockNews", (string)null);
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Contents")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Creater")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StockCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("StockCode");

                    b.ToTable("StockNote", (string)null);
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockProfit", b =>
                {
                    b.Property<string>("StockCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<decimal>("Gross")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperatingProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Revenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UntaxedNetProfit")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StockCode", "Date");

                    b.HasIndex("Date");

                    b.ToTable("StockProfit", (string)null);
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockRevenue", b =>
                {
                    b.Property<string>("StockCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<decimal>("CurrentMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MoM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PreMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PreYearMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PreYearTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalYoY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("YearTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("YoY")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StockCode", "Date");

                    b.HasIndex("Date");

                    b.ToTable("StockRevenue", (string)null);
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockSeminar", b =>
                {
                    b.Property<string>("StockCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("FileEn")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileZh")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Place")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Video")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Web")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("StockCode", "Date");

                    b.HasIndex("Date");

                    b.ToTable("StockSeminar", (string)null);
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockDay", b =>
                {
                    b.HasOne("ClassifiedAds.Domain.Entities.Stock", "StockCodeNavigation")
                        .WithMany("StockDays")
                        .HasForeignKey("StockCode")
                        .IsRequired()
                        .HasConstraintName("FK_stockDay_stock");

                    b.Navigation("StockCodeNavigation");
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockGroupItem", b =>
                {
                    b.HasOne("ClassifiedAds.Domain.Entities.Stock", "StockCodeNavigation")
                        .WithMany("StockGroupItems")
                        .HasForeignKey("StockCode")
                        .IsRequired()
                        .HasConstraintName("FK_stock_group_items_stock");

                    b.Navigation("StockCodeNavigation");
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockInsiderTransaction", b =>
                {
                    b.HasOne("ClassifiedAds.Domain.Entities.Stock", "StockCodeNavigation")
                        .WithMany()
                        .HasForeignKey("StockCode");

                    b.Navigation("StockCodeNavigation");
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockNew", b =>
                {
                    b.HasOne("ClassifiedAds.Domain.Entities.Stock", "StockCodeNavigation")
                        .WithMany()
                        .HasForeignKey("StockCode");

                    b.Navigation("StockCodeNavigation");
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockNote", b =>
                {
                    b.HasOne("ClassifiedAds.Domain.Entities.Stock", "StockCodeNavigation")
                        .WithMany("StockNotes")
                        .HasForeignKey("StockCode")
                        .IsRequired()
                        .HasConstraintName("FK_stock_note_stock");

                    b.Navigation("StockCodeNavigation");
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockProfit", b =>
                {
                    b.HasOne("ClassifiedAds.Domain.Entities.Stock", null)
                        .WithMany("StockProfits")
                        .HasForeignKey("StockCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.StockRevenue", b =>
                {
                    b.HasOne("ClassifiedAds.Domain.Entities.Stock", null)
                        .WithMany("StockRevenues")
                        .HasForeignKey("StockCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassifiedAds.Domain.Entities.Stock", b =>
                {
                    b.Navigation("StockDays");

                    b.Navigation("StockGroupItems");

                    b.Navigation("StockNotes");

                    b.Navigation("StockProfits");

                    b.Navigation("StockRevenues");
                });
#pragma warning restore 612, 618
        }
    }
}
